import pandas as pd
import streamlit as st
from PIL import Image
import pytesseract
import plotly.express as px
import re
import time

# Function to extract text from an image using OCR
def extract_text_from_image(image):
    try:
        extracted_text = pytesseract.image_to_string(image)
        return extracted_text
    except Exception as e:
        st.error(f"Error during OCR: {str(e)}")
        return None

# Function to process Cash Flow data
def process_cash_flow_data(extracted_text):
    try:
        # Example: Parse extracted text into structured data
        # This is a placeholder for actual parsing logic
        # Use regex to extract relevant data (e.g., categories, amounts)
        cash_flow_data = re.findall(r"([\w\s]+)\s+([\d,]+\.\d{2})", extracted_text)
        
        # Convert to DataFrame
        data = {
            "Category": [t[0] for t in cash_flow_data],
            "Amount": [float(t[1].replace(",", "")) for t in cash_flow_data]
        }
        df = pd.DataFrame(data)
        return df
    except Exception as e:
        st.error(f"Error processing data: {str(e)}")
        return None

# Function to visualize Cash Flow data
def visualize_cash_flow_data(df):
    try:
        # Bar Chart for Cash Flow Overview
        fig_bar = px.bar(
            df,
            x="Category",
            y="Amount",
            title="Cash Flow Overview",
            color="Category",
            color_discrete_sequence=px.colors.qualitative.Dark24
        )
        st.plotly_chart(fig_bar)

        # Pie Chart for Cash Flow Distribution
        fig_pie = px.pie(
            df,
            names="Category",
            values="Amount",
            title="Cash Flow Distribution",
            color_discrete_sequence=px.colors.qualitative.Dark24
        )
        st.plotly_chart(fig_pie)

        # Line Chart for Cash Flow Trend (if time-based data is available)
        if "Date" in df.columns:
            fig_line = px.line(
                df,
                x="Date",
                y="Amount",
                title="Cash Flow Trend Over Time",
                color_discrete_sequence=px.colors.qualitative.Dark24
            )
            st.plotly_chart(fig_line)
    except Exception as e:
        st.error(f"Error during visualization: {str(e)}")

# Main Cash Flow Analysis Function
def cash_flow_analysis():
    st.header("üí∏ Cash Flow Analysis")
    st.markdown("Upload an image of your Cash Flow Statement to analyze and visualize the data.")

    # File Uploader
    uploaded_file = st.file_uploader("Upload Cash Flow Statement (Image)", type=["jpg", "png", "jpeg"])
    if uploaded_file:
        try:
            # Open the uploaded image
            image = Image.open(uploaded_file)
            st.image(image, caption="Uploaded Cash Flow Statement", use_column_width=True)

            # Extract text using OCR
            with st.spinner("üîç Extracting text from the image..."):
                extracted_text = extract_text_from_image(image)
                time.sleep(2)  # Simulate processing time

            if extracted_text:
                with st.expander("üìÑ View Extracted Text"):
                    st.code(extracted_text, language="text")

                # Process extracted text into structured data
                with st.spinner("üìä Processing data..."):
                    df = process_cash_flow_data(extracted_text)
                    time.sleep(2)  # Simulate processing time

                if df is not None:
                    st.subheader("Processed Cash Flow Data")
                    st.write(df)

                    # Visualize the data
                    st.subheader("Visualizations")
                    visualize_cash_flow_data(df)
                else:
                    st.warning("No valid data found in the extracted text.")
            else:
                st.warning("No text could be extracted from the image.")
        except Exception as e:
            st.error(f"Error: {str(e)}")

# Main Function
def main():
    st.title("Finsight üíº - Cash Flow Analysis")
    cash_flow_analysis()

if __name__ == "__main__":
    main()